(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{158:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var o=n(1),r=n(9),a=(n(0),n(252)),s={id:"taxonomy",title:"Taxonomy"},i={id:"legacy/v4/guides/taxonomy",title:"Taxonomy",description:"[![docs-source](https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a)](https://github.com/infinum/eightshift-libs/tree/develop/src/custom-taxonomy)",source:"@site/docs/legacy/v4/guides/taxonomy.md",permalink:"/eightshift-docs/docs/legacy/v4/guides/taxonomy",sidebar:"docs",previous:{title:"Post Type",permalink:"/eightshift-docs/docs/legacy/v4/guides/post-type"},next:{title:"Registration",permalink:"/eightshift-docs/docs/legacy/v4/guides/blocks-registration"}},c=[{value:"Example:",id:"example",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/infinum/eightshift-libs/tree/develop/src/custom-taxonomy"}),Object(a.b)("img",Object(o.a)({parentName:"a"},{src:"https://img.shields.io/badge/source-eigthshift--libs-blue?style=for-the-badge&logo=php&labelColor=2a2a2a",alt:"docs-source"})))),Object(a.b)("p",null,"Custom Taxonomy class is located in ",Object(a.b)("inlineCode",{parentName:"p"},"Eightshift Libs"),". To extend it, use ",Object(a.b)("inlineCode",{parentName:"p"},"Eightshift_Libs\\Custom_Taxonomy\\Base_Taxonomy")," class. This is an abstract class."),Object(a.b)("h2",{id:"example"},"Example:"),Object(a.b)("p",null,"To create custom taxonomy:\n1. make a new class ",Object(a.b)("inlineCode",{parentName:"p"},"src/custom-taxonomy/class-blog-taxonomy.php"),".\n2. implement all the methods provided in the example.\n3. register the class inside the ",Object(a.b)("inlineCode",{parentName:"p"},"class-main.php")," file.\n4. dump autoload."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"<?php\n/**\n * The Blog_Taxonomy specific functionality.\n *\n * @since   1.0.8\n * @package Eightshift_Boilerplate\\Custom_Taxonomy\n */\n\ndeclare( strict_types=1 );\n\nnamespace Eightshift_Boilerplate\\Custom_Taxonomy;\n\nuse Eightshift_Libs\\Custom_Taxonomy\\Base_Taxonomy;\n\n/**\n * Class Blog_Taxonomy\n */\nclass Blog_Taxonomy extends Base_Taxonomy {\n\n  /**\n   * Taxonomy slug costant.\n   *\n   * @var string\n   *\n   * @since 1.0.0\n   */\n  const TAXONOMY_SLUG = 'blog-category';\n\n  /**\n   * Rest API Endpoint slug costant.\n   *\n   * @var string\n   *\n   * @since 1.0.0\n   */\n  const REST_API_ENDPOINT_SLUG = 'blogs-categories';\n\n  /**\n   * Get the slug of the custom taxonomy\n   *\n   * @return string Custom taxonomy slug.\n   *\n   * @since 0.1.0\n   */\n  protected function get_taxonomy_slug() : string {\n    return static::TAXONOMY_SLUG;\n  }\n\n  /**\n   * Get the post type slug to use the taxonomy.\n   *\n   * @return string Custom post type slug.\n   *\n   * @since 0.1.0\n   */\n  protected function get_post_type_slug() : string {\n    return 'post';\n  }\n\n  /**\n   * Get the arguments that configure the custom taxonomy.\n   *\n   * @return array Array of arguments.\n   *\n   * @since 0.1.0\n   */\n  protected function get_taxonomy_arguments() : array {\n    return [\n      'hierarchical'      => true,\n      'label'             => esc_html__( 'Blog Categories', 'eightshift-boilerplate' ),\n      'show_ui'           => true,\n      'show_admin_column' => true,\n      'show_in_nav_menus' => false,\n      'public'            => true,\n      'show_in_rest'      => true,\n      'query_var'         => true,\n      'rest_base'         => static::REST_API_ENDPOINT_SLUG,\n      'rewrite'           => array(\n        'hierarchical'  => true,\n        'with_front'    => false,\n      ),\n    ];\n  }\n}\n")))}u.isMDXComponent=!0},252:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},g=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),g=o,b=p["".concat(s,".").concat(g)]||p[g]||m[g]||a;return n?r.a.createElement(b,i({ref:t},l,{components:n})):r.a.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=g;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"}}]);